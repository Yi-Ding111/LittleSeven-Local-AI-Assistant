name: LLM deployemnt into EKS Auto Mode

on:
  push:
    branches:
      - master
      - yiding
  # trigger manually
  workflow_dispatch:
    inputs:
      runScope:
        type: choice
        description: "LLM deployment or destroy"
        required: true
        default: "Deployment"
        options:
          - "Deployment"
          - "Destroy"

# permissions:
#   id-token: write
#   contents: read

env:
  EKS_NODE_ROLE: "eksAutoModeNodeRole-YiDing"
  WORK_DIR: "${{ github.workspace }}/LLM-EKS-deployment"

jobs:
  setup:
    name: "Setup Terraform & AWS env"
    runs-on: ubuntu-latest
    environment: LLM-EKS # binding the environment which set in github environemnt to store var and secrets
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      # setup tf env
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # debug
      # - name: Debug Variables
      #   run: |
      #     echo "AWS_REGION: ${{ vars.REGION }}
      #     echo "S3_BUCKET: ${{ vars.S3_BUCKET }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET }}
          aws-region: ${{ vars.REGION }}

  terraform-plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    needs: setup
    environment: LLM-EKS
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET }}
          aws-region: ${{ vars.REGION }}

      - name: Setup Terraform State Config file
        run: |
          echo "WORK_DIR: ${{ env.WORK_DIR }}"
          chmod +x ${{ env.WORK_DIR }}/.scripts/setup_state_config.sh
          ${{ env.WORK_DIR }}/.scripts/setup_state_config.sh
        env:
          S3_BUCKET: ${{ vars.S3_BUCKET }}
          AWS_REGION: ${{ vars.REGION }}

      # # debug
      # - name: Debug state.config file
      #   run: |
      #     echo "Checking state.config in ${{ env.WORK_DIR }}"
      #     ls -l ${{ env.WORK_DIR }}/state.config

      # Temporarily modify the .gitignore so that terraform allows it to not be ignored
      # - name: Allow Upload of .terraform/
      #   run: |
      #     echo "!.terraform/" >> .gitignore

      - name: Initialize Terraform
        run: |
          cd ${{ env.WORK_DIR }}
          terraform init -backend-config="./state.config"

      - name: Terraform Plan
        run: |
          cd ${{ env.WORK_DIR }}
          terraform plan
        env:
          TF_VAR_region: ${{ vars.REGION }}

      # debug
      - name: Debug Terraform Lock File
        run: |
          echo "Checking for .terraform.lock.hcl file"
          ls -l ${{ env.WORK_DIR }}/.terraform.lock.hcl || echo "File not found!"


      - name: Save Terraform Init Data and state config file for apply job
        uses: actions/upload-artifact@v4
        with:
          name: state-config-artifacts
          path: |
            ${{ env.WORK_DIR }}/state.config


  terraform-apply:
    name: "Terraform Apply Or Destroy"
    runs-on: ubuntu-latest
    needs: terraform-plan
    environment: LLM-EKS
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET }}
          aws-region: ${{ vars.REGION }}

      # download state.config file artifacts
      - name: Restore Terraform State Config
        uses: actions/download-artifact@v4
        with:
          name: state-config-artifacts
          path: ${{ env.WORK_DIR }}

      # ensure the config file is downloaded
      - name: Debug Downloaded State Config
        run: |
          echo "Checking downloaded state.config file"
          ls -l ${{ env.WORK_DIR }}/state.config || echo "File not found!"

      - name: Initialize Terraform
        run: |
          cd ${{ env.WORK_DIR }}
          terraform init -backend-config="./state.config"

      - name: Apply or Destroy Terraform Changes
        run: |
          cd ${{ env.WORK_DIR }}
          if [[ "${{ github.event.inputs.runScope }}" == "Destroy" ]]; then
            echo "Running terraform destroy..."
            terraform destroy --auto-approve
          else
            echo "Running terraform apply..."
            terraform apply --auto-approve
          fi


  terraform-output:
    name: "Process Terraform Outputs & Update NodeClass"
    runs-on: ubuntu-latest
    needs: terraform-apply
    environment: LLM-EKS
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET }}
          aws-region: ${{ vars.REGION }}

      # download state.config file artifacts
      - name: Restore Terraform State Config
        uses: actions/download-artifact@v4
        with:
          name: state-config-artifacts
          path: ${{ env.WORK_DIR }}

      # ensure the config file is downloaded
      - name: Debug Downloaded State Config
        run: |
          echo "Checking downloaded state.config file"
          ls -l ${{ env.WORK_DIR }}/state.config || echo "File not found!"

      - name: Initialize Terraform
        run: |
          cd ${{ env.WORK_DIR }}
          terraform init -backend-config="./state.config"

      # - name: Install jq
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y jq

      - name: Update NodeClass with Terraform Outputs
        run: |
          cd ${{ env.WORK_DIR }}
          terraform output -json private_subnet_ids | jq -r '.[0]'

      - name: Update NodeClass with Terraform Outputs
        run: |
          # read Terraform output
          cd ${{ env.WORK_DIR }}
          SUBNET_ID_1=$(terraform output -json private_subnet_ids | jq -r '.[0]')
          SUBNET_ID_2=$(terraform output -json private_subnet_ids | jq -r '.[1]')
          SECURITY_GROUP_ID=$(terraform output -raw eks_cluster_sg_id)
          NODE_ROLE="${{ env.EKS_NODE_ROLE }}"

          # replace NodeClass file's placeholders
          sed -i "s#__SUBNET_ID_1__#$SUBNET_ID_1#g" ./eks/manifests/nodeclass.yaml
          sed -i "s#__SUBNET_ID_2__#$SUBNET_ID_2#g" ./eks/manifests/nodeclass.yaml
          sed -i "s#__SECURITY_GROUP_ID__#$SECURITY_GROUP_ID#g" ./eks/manifests/nodeclass.yaml
          sed -i "s#__EKS_NODE_ROLE__#$NODE_ROLE#g" ./eks/manifests/nodeclass.yaml

          echo "NodeClass updated successfully:"
          cat ./eks/manifests/nodeclass.yaml

      
      - name: Save Terraform Init Data and state config file for apply job
        uses: actions/upload-artifact@v4
        with:
          name: nodeclass-artifacts
          path: |
            ${{ env.WORK_DIR }}/eks/manifests/nodeclass.yaml