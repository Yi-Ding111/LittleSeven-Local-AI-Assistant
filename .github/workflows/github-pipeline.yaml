name: LLM deployemnt into EKS Auto Mode

on:
  push:
    branches:
      - master
      - yiding
  # trigger manually
  workflow_dispatch:
    inputs:
      runScope:
        type: choice
        description: "LLM deployment or destroy"
        required: true
        default: "LLM deployment"
        options:
          - "LLM deployment"
          - "LLM destroy"

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read 


env:
  EKS_NODE_ROLE: "eksAutoModeNodeRole-YiDing"
  WORK_DIR: "${{ github.workspace }}/LLM-EKS-deployment"

jobs:
  setup:
    name: "Setup Terraform & AWS env"
    runs-on: ubuntu-latest
    environment: LLM-EKS # binding the environment which set in github environemnt to store var and secrets
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      # setup tf env
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # debug
      # - name: Debug Variables
      #   run: |
      #     echo "AWS_REGION: ${{ vars.REGION }}
      #     echo "S3_BUCKET: ${{ vars.S3_BUCKET }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET }}
          aws-region: ${{ vars.REGION }}

  terraform-plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    needs: setup
    environment: LLM-EKS
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET }}
          aws-region: ${{ vars.REGION }}

      - name: Setup Terraform State Config file
        run: |
          chmod +x $WORK_DIR/.scripts/setup_state_config.sh
          $WORK_DIR/.scripts/setup_state_config.sh
        env: 
          S3_BUCKET: ${{ vars.S3_BUCKET }}
          AWS_REGION: ${{ vars.REGION }}

      - name: Initialize Terraform
        run: |
          cd $WORK_DIR
          terraform init -backend-config="./state.config"

      - name: Terraform Plan
        run: |
          cd $WORK_DIR
          terraform plan
        env:
          TF_VAR_region: ${{ vars.REGION }}


      - name: Save Terraform Init Data and state config file for apply job
        uses: actions/upload-artifact@v4
        with:
          name: terraform-artifacts
          path: |
            $WORK_DIR/.terraform
            $WORK_DIR/state.config


  # terraform-apply:
  #   name: "Terraform Apply Or Destroy"
  #   runs-on: ubuntu-latest
  #   needs: terraform-plan
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v3

  #     - name: Apply or Destroy Terraform Changes
  #       run: |
  #         cd $WORK_DIR
  #         if [ "${{ github.event.inputs.runScope }}" == "LLM destroy" ]; then
  #           terraform destroy --auto-approve
  #         else
  #           terraform apply --auto-approve
  #         fi




  # terraform-output:
  #   name: "Process Terraform Outputs & Update NodeClass"
  #   runs-on: ubuntu-latest
  #   needs: terraform-apply
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v3

  #     - name: Update NodeClass with Terraform Outputs
  #       run: |
  #         # read Terraform output
  #         cd $WORK_DIR
  #         SUBNET_ID_1=$(terraform output -json private_subnet_ids | jq -r '.[0]')
  #         SUBNET_ID_2=$(terraform output -json private_subnet_ids | jq -r '.[1]')
  #         SECURITY_GROUP_ID=$(terraform output -raw eks_cluster_sg_id)
  #         NODE_ROLE="${{ env.EKS_NODE_ROLE }}"

  #         # replace NodeClass file's placeholders
  #         sed -i "s#__SUBNET_ID_1__#$SUBNET_ID_1#g" ./eks/manifests/nodeclass.yaml
  #         sed -i "s#__SUBNET_ID_2__#$SUBNET_ID_2#g" ./eks/manifests/nodeclass.yaml
  #         sed -i "s#__SECURITY_GROUP_ID__#$SECURITY_GROUP_ID#g" ./eks/manifests/nodeclass.yaml
  #         sed -i "s#__EKS_NODE_ROLE__#$NODE_ROLE#g" ./eks/manifests/nodeclass.yaml

  #         echo "NodeClass updated successfully:"
  #         cat ./eks/manifests/nodeclass.yaml
